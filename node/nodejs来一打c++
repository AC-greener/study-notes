### Chrome V8基础

- JavaScript中的数据类型都是由V8内部的内存机制进行管理的

##### 基本概念

- 内存机制（堆内存）

  - 新生代内存区：基本的数据对象都在这里，特点是小而频，区域小但垃圾回收频繁

  - 老生代指针区：一堆指向老生代内存具体数据内容的指针，从新生代蜕变过来的对象会被移动到这儿

  - 老生代数据区：存放数据对象，老生代指针指向这里

  - 大对象区：存放体积超越其他区大小的对象，垃圾回收并不会移动大对象

  - 代码区：也就是包含JIT之后指针的对象，会被分配在这里。是唯一拥有执行权限的内存区

  - 新生代内存管理

    - Scavenge算法

    - 对象的晋升

  - 老生代内存管理

    - 标记清除

    - 标记整理

    - 惰性清理

- 隔离实例（Isolate），Isolate是一个V8引擎的实例，每个实例有完全独立的各种状态，包括对管理、垃圾回收

- 上下文(Context)，可以理解为是一个沙箱化的Javascript执行上下文环境，上下文也是独立且允许存在多个

- 脚本（Script）是一个包含一段已经编译好的Javascript脚本对象

##### 句柄（Handle）

提供了对JS数据对象的引用，当一个对象不在被句柄引用时，会被认为是垃圾。对比指针：如果使用指针，一旦一个对象被移走，就会变成野指针，而在移动过程中，垃圾回收器会更新引用这些数据块的句柄，让其断不了联系

- 本地句柄：存在于栈内存中，并在对应的异构函数被调用时被删除，生命周期是由其所存在的句柄作用域决定的

- 持久句柄，和本地句柄在生命周期上的管理方式不同

- 永生句柄，在生命周期内不会被删除

- 待实本地句柄

- 其他句柄

- 句柄作用域：维护一堆句柄的容器，以栈的形式一层一层套着

##### 模板（Template）

指的是在上下文中js对象和函数的一个模具，可以用模板吧c++函数包裹进js的对象中，这样js就能进行一些操作

- 函数模板，是一个js函数的模具

- 对象模板

##### V8常用数据类型

- 基值Value，Value是一个基类，这些数据类型都是由value继承的

  - Primitive

  - Object

  - External

#### 异步之旅-libuv

ibuv是一个高性能的，事件驱动的I/O库，并且提供了跨平台（如windows, linux）的API。

##### 基础概念

- 事件循环（IOCP、kqueue、epoll）

- 句柄和请求

  - 句柄

    libuv的一个基本单位就是句柄，事件的操作都是通过创建IO设备、计时器等句柄来进行的

    - uv_loop_t事件循环句柄

    - uv_tcp_t TCP句柄

    - ...

  - 请求
    句柄代表了一个长生命周期的抽象'物件'，而在相应的句柄上，有很多与之关联的请求，请求的生命周期可以理解为一次性的

  - 

##### libuv的跨线程编程

- 同步原语

  同步：避免对统一数据的并发访问（通常由中断、兑成多处理器、内核抢占等引起）。同步原语就是用来执行同步的一些实体

  - 互斥锁

  - 读写锁

  - 信号量

  - 条件变量

  - 屏障

- 工作队列
  在libuv中，工作队列指的是uv_queue_work这一系列函数，可以使用额外的线程来执行异步任务

##### 跨线程通信

- nodejs实际上是一个使用C++完成的程序，其能够执行JS代码，底层主要由两部分库组成

  - Chrome V8，是Javascript的运行时，由于解释执行js。是由c++实现的库

  - libuv实现了nodejs中的事件循环